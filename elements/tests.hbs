<h1>Fractal and Gulp Toolkit Tests</h1>

<h2>Production Tasks</h2>

<p>Run 'gulp' in your terminal to begin the following tests:</p>

<h3>Verifying SCSS Complilation</h3>

<p>The text on this page should be styled in the custom variable font <strong><em>Source Sans</em></strong>.</p>

<p>This <code>code</code> and other code samples on this page should be red. All text on this page should be styled in the system-ui font. These conditions confirm the following:</p>

<ol>
  <li>The <a href="https://github.com/sindresorhus/modern-normalize">modern-normalize</a> CSS library is getting imported into _critical.scss via the <a href="https://github.com/postcss/postcss-import">postcss-import</a> plugin</li>
  <li>The scss in _critical.scss is getting compliled to critical.css</li>
  <li>The compiled CSS file critical.css is getting inlined into the <code>&lt;style&gt;</code> tag within the <code>&lt;head&gt;</code> of the Fractal templates</li>
  <li>The scss variable <code>$color-darkred</code> is getting compiled from the _variables.scss file</li>
</ol>

<p><span class="test-main-scss">This text should be green</span> which confirms the following:</p>

<ol>
  <li>The scss in _tests.scss is getting compliled to noncritical.css via import from noncritical.scss</li>
  <li>The compiled CSS file noncritical.css is loading from the <code>&lt;link&gt;</code> tag within the <code>&lt;head&gt;</code> of the Fractal templates</li>
  <li>The scss variable <code>$color-green</code> is getting compiled from the _variables.scss file</li>
</ol>

<h3>Verifying SCSS Linter</h3>

<p class="test-sass-lint">In the terminal, there should be the following warning:</p>

<pre>
  <samp>
  scss/_tests.scss
    13:3  ⚠  Expected "display" to come before "cursor"
  </samp>
</pre>

<p>This CSS property sort order warning (intentional for this test) confirms that the <a href="https://stylelint.io/">stylelint</a> linter is working.</p>

<h3>Verifying Autoprefixer's Basic Prefixing</h3>

<p class="test-autoprefixer-basic">This paragraph is styled with the <code>user-select</code> CSS property, which should create browser prefixes in the CSS. Inspect this paragraph via DevTools and confirm the appearance (usually crossed out) of <code>-webkit-</code> and other browser prefixes.</p> This will confirm that Autoprefixer is working.

<h3>Verifying Autoprefixer's IE Grid Prefixing</h3>

<div class="test-autoprefixer-grid">
  <div class="test-grid-header">This should be a header cell spanning a 4-cell, 2-by-2 grid, with a 5 pixel grid gap and gray background. It should appear as such in IE 11 via Autoprefixer applying <code>-ms-grid</code> prefixes. Confirm by viewing this in IE 11.</div>
  <div class="test-grid-1">Cell 1</div>
  <div class="test-grid-2">Cell 2</div>
  <div class="test-grid-3">Cell 3</div>
  <div class="test-grid-4">Cell 4</div>
</div>

<h3>Verifying PostCSS Logical Plugin</h3>

<p>In the SCSS, the logical properties <code>inline-size</code>, <code>block-size</code>, and <code>inset</code> should be converted to the physical properties <code>width</code>, <code>height</code>, and <code>top</code>, <code>right</code>, <code>bottom</code>, <code>left</code> respectively in the CSS.</p>

<p>There should be a green box inset 10px from the top, 40px from the right, 60px from the bottom, and 30% from the left of a red box 80% wide and 150px high:</p>

<div class="test-postcsslogical">
  <div>Child Box</div>
</div>

<p>This would confirm that the <a href="https://github.com/csstools/postcss-logical">postcss-logical</a> plugin is working.</p>

<h3>Verifying SVG Injection into CSS</h3>

<p class="test-icon">A green "check" icon as a background image should appear here:</p>

<p>This confirms that the <a href="https://github.com/jonathantneal/postcss-svg">postcss-svg</a> plugin is working.</p>

<h3>Verifying Faker Library</h3>

<p><strong>Text generated by Faker should follow here:</strong> {{ test.text }}</p>

<h3>Verifying Basic JavaScript Functionality</h3>

<p>In DevTools, confirm that the <code>body</code> tag has a class of <code>js-working</code> as a result of the JS within the file <em>js/test-bodytag.js</em>.</p>

<p>Are each of the following list items getting toggled to green one at a time when clicked as a result of the JS within the file <em>test-foreach.js</em>?:</p>

<ul class="test-foreach">
  <li>One</li>
  <li>Two</li>
  <li>Three</li>
  <li>Four</li>
  <li>Five</li>
</ul>

<p>Is the following HTML element with the selector <code>test-javascript</code> getting its text changed to "yes" as a result of the JS within the file <em>js/test-selector.js</em>?: (yes or no): <strong class="test-javascript">no</strong></p>

<h3>Verifying JavaScript Linter (eslint)</h3>

<p>Open one of the five JS files in /js/ and save it to trigger the JS linting process.</p>

<p>In the terminal, there should be the following two errors:</p>

<pre>
  <samp>
  /[user]/[path to repos]/cdlib-ui-kit/js/test-bodytag.js
    5:40  error  Extra semicolon

  /[user]/[path to repos]/cdlib-ui-kit/js/test-selector.js
    3:5  error  'unused' is defined but never used
  </samp>
</pre>

<p>The semicolon and unused errors confirm that the eslint and standard javascript plugins are working properly.</p>

<p>In the file test-selector.js, the two variables <code>ignoreThisLine</code> and <code>ignoreNextLine</code> should be getting ignored by eslint due to the use of eslint ignore directives; they should not be throwing eslint errors.</p>

<h3>Verifying JavaScript Transformation, Polyfilling, and Bundling</h3>

<p>Open one of the five JS files in /js/ and save it to trigger the JS linting process again.</p>

<p>In the terminal, there should be text indicating that <em>.bableled.js</em> was  built. This should look like:</p>

<pre>
  <samp>
⠙ Building .babeled.js...
✨  Built in 33ms.
  </samp>
</pre>

<p>This confirms that <a href="https://babeljs.io/">Babel</a> and the <a href="https://parceljs.org/">Parcel</a> bundler successfully did the following:</p>

<ol>
  <li>Babel found all the files within <em>/js/</em> and concatenated them into <em>.babeled.js</em></li>
  <li>Parcel found <em>.babeled.js</em> and created the <em>main.js</em> bundle within <em>ui-assets/js/</em></li>
</ol>

<p>Verify Babel and Parcel polyfilling by doing the following:</p>

<ol>
  <li>Open this page in an browser that's within the Browserslist targets for this project, but does not support the <code>forEach</code> javaScript method, such as IE 11</li>
  <li>Click the list items under the <strong>Verifying Basic JavaScript Functionality</strong> section above and confirm that they are getting toggled to green one at a time when clicked, just like within a modern browser</li>
</ol>

<p>This confirms that Babel and Parcel is polyfilling the missing <code>forEach</code> JavaScript functionality within <em>test-foreach.js</em>.</p>

<p>To further understand how and what Babel and Parcel are  polyfilling:</p>

<ul>
  <li>Change the <code>debug</code> babel configuration in package.json from <code>false</code> to <code>true</code>. Babel will output polyfill information for each JS file in the terminal every time it's run.</li>
  <li>Add the flag <code>--log-level 4</code> to the <code>parcel-watch</code> script in package.json's scripts to see what Parcel is bundling</li>
</ul>

<p>To confirm that Babel transformations are working, open ui-assets/js/main.js and find the <code>arrowFunctionTest</code> function (search in your text editor for <code>arrowFunctionTest</code>).</p>

<p>The ES2015 arrow function declared using the <code>const</code> variable in js/test-arrowfunction.js should have been transformed to the older ES5 function syntax in ui-assets/js/main.js, using the variable declaration <code>var</code>.</p>

<h3>Verifying Node Module Bundling</h3>

<p>The dependency <a href="https://github.com/javan/details-element-polyfill">details-element-polyfill</a> should be getting included within the Parcel bundle <em>.babeled.js</em>. This node module is getting imported from the file <em>/js/dependencies.js</em> during the gulp development and build processes.</p>

<p>Below is a <code>details</code> HTML element. Clicking on the bold text "See More" should show a string of lorem ipsum text below it. Clicking the text again should hide the lorem ipsum text. This toggle behavior is expected in all modern browsers:</p>

<details class="test-details">
  <summary>See More</summary>
  <div>Lorem ipsum dolor sit amet, consectetur adipisicing elit. Aliquam debitis vel tenetur, deleniti saepe, in nisi obcaecati praesentium officiis accusantium? Voluptas, quasi. Quaerat rerum doloremque nesciunt voluptatem autem ad hic aliquid vitae odit tempore, delectus, maxime qui eaque nemo debitis magnam! Vitae vel dignissimos aliquam repudiandae soluta, quo enim exercitationem.</div>
</details>

<p>Open this page in IE 11, which does not natively support the <code>details</code> element. If the toggling behavior is similar to modern browsers, then the module <code>details-element-polyfill</code> has been successfully bundled by Parcel and is running normally.</p>

<p>If the lorem ipsum text is already open and clicking "See More" text does not toggle the text below open or closed, then the module is not loading correctly.</p>

<h2>Build Tasks</h2>

<p>Run 'gulp build' in your terminal to begin the following tests:</p>

<h3>Verifying File Compilation</h3>

<p>Confirm that /dist/ is created at root. If already created from previous build, confirm that folder's existing build files get deleted before new build files are added. Check that all files in /dist/ contain the same "Date Modified" date/time as when 'gulp build' was run.</p>

<h3>Verifying Error Reporting</h3>

<p>Confirm that the same Sass and JavaScript errors presented from the 'Gulp' task above were also generated in the console for the build task.</p>

<h3>Verifying UI Library Build in Browser</h3>

<p>Open index.html in a browser. Confirm that the CDLIB UI Library's UI and content matches exactly that of the 'Gulp' task.</p>

<h3>Verifying Asset File Minification</h3>

<p>Confirm that /dist/ui-assets/css/noncritical.css is minified without any sourcemaps.</p>

<p>Confirm that /dist/ui-assets/js/main.js is minified without any sourcemaps.</p>

<h2>Test Tasks</h2>

<p>Run 'gulp test' in your terminal to begin the test process. This will include the following tasks:</p>

<ol>
  <li>All build tasks listed above.</li>
  <li>The starting up of http-server (for Percy snapshots).</li>
  <li>The creation of a Percy build with snapshots on the Percy website.</li>
  <li>The stopping of http-server.</li>
</ol>

<h3>Verifying Accessibility Testing</h3>

<p>Browse to the "Other" page. On that page is an <code>&lt;input&gt;</code> tag missing a label:</p>

<p>This should trigger the following two accessibility errors via the <a href="https://github.com/pa11y/pa11y-ci">pa11y-ci</a> plugin in the terminal:</p>

<pre>
  <samp>
  • This textinput element does not have a name available to an accessibility
   API. Valid names are: label element, title undefined, aria-label undefined,
   aria-labelledby undefined.

  (html > body > input)

  &lt;input type="text" class="test-input-missing-label"&gt;

  • This form field should be labelled in some way. Use the label element
   (either with a "for" attribute or wrapped around the form field), or
   "title", "aria-label" or "aria-labelledby" attributes as appropriate.

  (html > body > input)

  &lt;input type="text" class="test-input-missing-label"&gt;
  </samp>
</pre>

<p>Below is the same <code>&lt;input&gt;</code> tag missing a label, but it should get skipped during the accessibility testing because pages using the "default" template do not get checked for accessibility.</p>

<input type="text" class="test-input-missing-label">

<h3>Verifying UI Library Published on GitHub Pages</h3>

<p>Confirm that the UI Library was published to the GitHub Pages URL: <a href="https://cdlib.github.io/cdlib-ui-kit">https://cdlib.github.io/cdlib-ui-kit</a>.</p>

<h3>Verify Percy Builds</h3>

<p>Check that Percy created a build at <a href="https://percy.io/CDL1/cdlib-ui">https://percy.io/CDL1/cdlib-ui</a> (login required).</p>

<p>Run the 'gulp test' process again to generate another Percy build. Compare the first and second build from the Percy website. The second build should contain no visual differences (unchanged snapshots) from the first. The paragraph of lorem ipsum text under the <strong>Verifying Faker Library</strong> heading should not have changed.</p>

<p>This verifies that Percy builds are getting created, the "testing" environment is getting set, and the faker data is not randomizing (staying fixed) between each build.</p>

<p>[end of all tests]</p>
